(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{508:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("只要你有开发经验，那么理解包 Package 就很容易了。包其实就是用来给功能模块进行分组的，在 Golang 中，一个文件目录就是一个包，目录下的所有 .go 文件都属于这个包。")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[s._v("├── CHANGELOG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("md        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 更新日志")]),s._v("\n├── README"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("md           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 说明文档")]),s._v("\n├── go"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mod              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 依赖管理")]),s._v("\n├── go"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("sum")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 依赖管理")]),s._v("\n├── main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("go             "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 入口文件")]),s._v("\n├── pkg                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 项目主目录")]),s._v("\n│   ├── accesses        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 数据访问层")]),s._v("\n│   ├── commons         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 公用组件")]),s._v("\n│   ├── controlls       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 控制层")]),s._v("\n│   ├── errs            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 错误定义")]),s._v("\n│   ├── handlers        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 视图层")]),s._v("\n│   ├── middlewares     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 中间件层")]),s._v("\n├── server              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 服务组件")]),s._v("\n│   ├── router"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("go\n│   └── server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("go\n├── static              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 静态文件")]),s._v("\n└── utils               "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 工具组件")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("以上方列出的 Golang 项目目录组织结构为例，pkg、server、static 、handlers 和 utils 目录对应的就是 UML 中所说的包，router.go 和 server.go 可以称为模块或者组件。")]),s._v(" "),a("h2",{attrs:{id:"包的表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包的表示"}},[s._v("#")]),s._v(" 包的表示")]),s._v(" "),a("p",[s._v("当然，包不仅仅指物理的工程目录结构，代码结构关系也可以用包表示。假设 server.go 文件里面有 run 函数、config 函数和，那么 server 就可以看作一个包，run 函数和 config 函数就可以看作是模块或者组件，具体表示如下。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://can.sfhfpc.com/uPic/image-20200720153133921.png",alt:"image-20200720153133921"}})]),s._v(" "),a("p",[s._v("再往更小的单元看，假设有一个名为 CarSystem 的类，类里面包含 music 函数、air-conditioning 函数和 lighting 函数，那么 CarSystem 就可以看作一个包，里面的几个函数就可以看作是模块或者组件，具体表示如下。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://can.sfhfpc.com/uPic/image-20200720153049761.png",alt:"image-20200720153049761"}})]),s._v(" "),a("p",[s._v("往大了说，包是顶层的目录，而模块或组件就是里面的文件。往小了说，包就是一个类，里面的函数、变量等就是包的组件。看明白了吗？")]),s._v(" "),a("h2",{attrs:{id:"包与包之间的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包与包之间的关系"}},[s._v("#")]),s._v(" 包与包之间的关系")]),s._v(" "),a("p",[s._v("模块与模块之间会有关联关系，类与类之间也有关联关系。以面向对象编程汇总的类为例，继承就是类之间关系的一种。包不仅仅用来表示类，所以包之间的关系不能直接用类之间的关系，而是有自己的关系描述。")]),s._v(" "),a("h3",{attrs:{id:"泛化、依赖与细化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛化、依赖与细化"}},[s._v("#")]),s._v(" 泛化、依赖与细化")]),s._v(" "),a("p",[s._v("包的关系主要有泛化、依赖和细化。前面的文章中我们已经了解过泛化，它以空心箭头表示，细化则以虚线箭头表示。包之间的 3 种关系如下图所示。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://can.sfhfpc.com/uPic/image-20200720153948217.png",alt:"image-20200720153948217"}})]),s._v(" "),a("p",[s._v("当一个包拥有和另一个包相同元素，但它却包含更多细节时，它们就是细化关系。以上图为例，自行车维修工具是修理工具的细化。工具和修理工具之间是泛化关系。")]),s._v(" "),a("p",[s._v("自行车维修工具依赖于修理工具，这一层你看懂了吗？")]),s._v(" "),a("h3",{attrs:{id:"合并关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并关系"}},[s._v("#")]),s._v(" 合并关系")]),s._v(" "),a("p",[s._v("包与包可以合并，例如修理工具包和保养工具包可以合并称为维护工具包，具体表示如下。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://can.sfhfpc.com/uPic/image-20200720155125875.png",alt:"image-20200720155125875"}})]),s._v(" "),a("p",[s._v("从实际业务角度来看，修理和保养都可以划分到维护业务中，所以这两个包是可以合并到一起的。包的合并关系用虚线箭头表示，箭头指向的包称为源包，无箭头的包称为合并目标。")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[s._v("小知识：合并目标用空包表示，无需将源包中的模块或组件放到合并目标中。")])]),s._v(" "),a("h2",{attrs:{id:"包中的包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包中的包"}},[s._v("#")]),s._v(" 包中的包")]),s._v(" "),a("p",[s._v("在上面 Golang 项目目录中存在着包嵌套包的情况，例如 handlers 和 errs 包在 pkg 包内。用 UML 图来表示的时候，直接放置包的图形即可，具体表示如下。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://can.sfhfpc.com/uPic/image-20200720155726081.png",alt:"image-20200720155726081"}})]),s._v(" "),a("p",[s._v("包相对于其他组件来说更上层，所以并没有复杂的关系，也不需要太多的表示符号。因此可以说包的概念并不复杂，比时序图和状态图来的更简单，你学会了吗？")])])}),[],!1,null,null,null);t.default=e.exports}}]);